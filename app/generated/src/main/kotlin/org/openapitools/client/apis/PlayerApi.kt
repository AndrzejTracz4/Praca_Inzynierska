/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ApiPlayersGetCollection200Response
import org.openapitools.client.models.PlayerPlayercreatePlayerwrite
import org.openapitools.client.models.PlayerPlayeritemread
import org.openapitools.client.models.PlayerPlayerreadPlayeritemread
import org.openapitools.client.models.PlayerPlayerwrite
import org.openapitools.client.models.PlayerjsonldPlayercreatePlayerwrite
import org.openapitools.client.models.PlayerjsonldPlayerreadPlayeritemread

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class PlayerApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Retrieves the collection of Player resources.
     * Retrieves the collection of Player resources.
     * @param page The collection page number (optional, default to 1)
     * @return kotlin.collections.List<PlayerPlayeritemread>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPlayersGetCollection(page: kotlin.Int? = 1) : kotlin.collections.List<PlayerPlayeritemread> {
        val localVarResponse = apiPlayersGetCollectionWithHttpInfo(page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<PlayerPlayeritemread>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves the collection of Player resources.
     * Retrieves the collection of Player resources.
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse<kotlin.collections.List<PlayerPlayeritemread>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiPlayersGetCollectionWithHttpInfo(page: kotlin.Int?) : ApiResponse<kotlin.collections.List<PlayerPlayeritemread>?> {
        val localVariableConfig = apiPlayersGetCollectionRequestConfig(page = page)

        return request<Unit, kotlin.collections.List<PlayerPlayeritemread>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiPlayersGetCollection
     *
     * @param page The collection page number (optional, default to 1)
     * @return RequestConfig
     */
    fun apiPlayersGetCollectionRequestConfig(page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/players",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Removes the Player resource.
     * Removes the Player resource.
     * @param id Player identifier
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPlayersIdDelete(id: kotlin.String) : Unit {
        val localVarResponse = apiPlayersIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Removes the Player resource.
     * Removes the Player resource.
     * @param id Player identifier
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiPlayersIdDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiPlayersIdDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiPlayersIdDelete
     *
     * @param id Player identifier
     * @return RequestConfig
     */
    fun apiPlayersIdDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/players/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a Player resource.
     * Retrieves a Player resource.
     * @param id Player identifier
     * @return PlayerPlayerreadPlayeritemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPlayersIdGet(id: kotlin.String) : PlayerPlayerreadPlayeritemread {
        val localVarResponse = apiPlayersIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PlayerPlayerreadPlayeritemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a Player resource.
     * Retrieves a Player resource.
     * @param id Player identifier
     * @return ApiResponse<PlayerPlayerreadPlayeritemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiPlayersIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<PlayerPlayerreadPlayeritemread?> {
        val localVariableConfig = apiPlayersIdGetRequestConfig(id = id)

        return request<Unit, PlayerPlayerreadPlayeritemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiPlayersIdGet
     *
     * @param id Player identifier
     * @return RequestConfig
     */
    fun apiPlayersIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/players/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Updates the Player resource.
     * Updates the Player resource.
     * @param id Player identifier
     * @param playerPlayerwrite The updated Player resource
     * @return PlayerPlayerreadPlayeritemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPlayersIdPatch(id: kotlin.String, playerPlayerwrite: PlayerPlayerwrite) : PlayerPlayerreadPlayeritemread {
        val localVarResponse = apiPlayersIdPatchWithHttpInfo(id = id, playerPlayerwrite = playerPlayerwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PlayerPlayerreadPlayeritemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the Player resource.
     * Updates the Player resource.
     * @param id Player identifier
     * @param playerPlayerwrite The updated Player resource
     * @return ApiResponse<PlayerPlayerreadPlayeritemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiPlayersIdPatchWithHttpInfo(id: kotlin.String, playerPlayerwrite: PlayerPlayerwrite) : ApiResponse<PlayerPlayerreadPlayeritemread?> {
        val localVariableConfig = apiPlayersIdPatchRequestConfig(id = id, playerPlayerwrite = playerPlayerwrite)

        return request<PlayerPlayerwrite, PlayerPlayerreadPlayeritemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiPlayersIdPatch
     *
     * @param id Player identifier
     * @param playerPlayerwrite The updated Player resource
     * @return RequestConfig
     */
    fun apiPlayersIdPatchRequestConfig(id: kotlin.String, playerPlayerwrite: PlayerPlayerwrite) : RequestConfig<PlayerPlayerwrite> {
        val localVariableBody = playerPlayerwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/merge-patch+json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/players/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Creates a Player resource.
     * Creates a Player resource.
     * @param playerPlayercreatePlayerwrite The new Player resource
     * @return PlayerPlayerreadPlayeritemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiPlayersPost(playerPlayercreatePlayerwrite: PlayerPlayercreatePlayerwrite) : PlayerPlayerreadPlayeritemread {
        val localVarResponse = apiPlayersPostWithHttpInfo(playerPlayercreatePlayerwrite = playerPlayercreatePlayerwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PlayerPlayerreadPlayeritemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a Player resource.
     * Creates a Player resource.
     * @param playerPlayercreatePlayerwrite The new Player resource
     * @return ApiResponse<PlayerPlayerreadPlayeritemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiPlayersPostWithHttpInfo(playerPlayercreatePlayerwrite: PlayerPlayercreatePlayerwrite) : ApiResponse<PlayerPlayerreadPlayeritemread?> {
        val localVariableConfig = apiPlayersPostRequestConfig(playerPlayercreatePlayerwrite = playerPlayercreatePlayerwrite)

        return request<PlayerPlayercreatePlayerwrite, PlayerPlayerreadPlayeritemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiPlayersPost
     *
     * @param playerPlayercreatePlayerwrite The new Player resource
     * @return RequestConfig
     */
    fun apiPlayersPostRequestConfig(playerPlayercreatePlayerwrite: PlayerPlayercreatePlayerwrite) : RequestConfig<PlayerPlayercreatePlayerwrite> {
        val localVariableBody = playerPlayercreatePlayerwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/players",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
