/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.OrderItemOrderItemcreateOrderItemwrite
import org.openapitools.client.models.OrderItemOrderItemitemread
import org.openapitools.client.models.OrderItemOrderItemreadOrderItemitemread
import org.openapitools.client.models.OrderItemOrderItemwrite

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class OrderItemApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Retrieves the collection of OrderItem resources.
     * Retrieves the collection of OrderItem resources.
     * @param page The collection page number (optional, default to 1)
     * @return kotlin.collections.List<OrderItemOrderItemitemread>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOrderItemsGetCollection(page: kotlin.Int? = 1) : kotlin.collections.List<OrderItemOrderItemitemread> {
        val localVarResponse = apiOrderItemsGetCollectionWithHttpInfo(page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<OrderItemOrderItemitemread>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves the collection of OrderItem resources.
     * Retrieves the collection of OrderItem resources.
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse<kotlin.collections.List<OrderItemOrderItemitemread>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiOrderItemsGetCollectionWithHttpInfo(page: kotlin.Int?) : ApiResponse<kotlin.collections.List<OrderItemOrderItemitemread>?> {
        val localVariableConfig = apiOrderItemsGetCollectionRequestConfig(page = page)

        return request<Unit, kotlin.collections.List<OrderItemOrderItemitemread>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiOrderItemsGetCollection
     *
     * @param page The collection page number (optional, default to 1)
     * @return RequestConfig
     */
    fun apiOrderItemsGetCollectionRequestConfig(page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/order_items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Removes the OrderItem resource.
     * Removes the OrderItem resource.
     * @param id OrderItem identifier
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOrderItemsIdDelete(id: kotlin.String) : Unit {
        val localVarResponse = apiOrderItemsIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Removes the OrderItem resource.
     * Removes the OrderItem resource.
     * @param id OrderItem identifier
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiOrderItemsIdDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiOrderItemsIdDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiOrderItemsIdDelete
     *
     * @param id OrderItem identifier
     * @return RequestConfig
     */
    fun apiOrderItemsIdDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/order_items/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a OrderItem resource.
     * Retrieves a OrderItem resource.
     * @param id OrderItem identifier
     * @return OrderItemOrderItemreadOrderItemitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOrderItemsIdGet(id: kotlin.String) : OrderItemOrderItemreadOrderItemitemread {
        val localVarResponse = apiOrderItemsIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderItemOrderItemreadOrderItemitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a OrderItem resource.
     * Retrieves a OrderItem resource.
     * @param id OrderItem identifier
     * @return ApiResponse<OrderItemOrderItemreadOrderItemitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiOrderItemsIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<OrderItemOrderItemreadOrderItemitemread?> {
        val localVariableConfig = apiOrderItemsIdGetRequestConfig(id = id)

        return request<Unit, OrderItemOrderItemreadOrderItemitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiOrderItemsIdGet
     *
     * @param id OrderItem identifier
     * @return RequestConfig
     */
    fun apiOrderItemsIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/order_items/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the OrderItem resource.
     * Updates the OrderItem resource.
     * @param id OrderItem identifier
     * @param orderItemOrderItemwrite The updated OrderItem resource
     * @return OrderItemOrderItemreadOrderItemitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOrderItemsIdPatch(id: kotlin.String, orderItemOrderItemwrite: OrderItemOrderItemwrite) : OrderItemOrderItemreadOrderItemitemread {
        val localVarResponse = apiOrderItemsIdPatchWithHttpInfo(id = id, orderItemOrderItemwrite = orderItemOrderItemwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderItemOrderItemreadOrderItemitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the OrderItem resource.
     * Updates the OrderItem resource.
     * @param id OrderItem identifier
     * @param orderItemOrderItemwrite The updated OrderItem resource
     * @return ApiResponse<OrderItemOrderItemreadOrderItemitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiOrderItemsIdPatchWithHttpInfo(id: kotlin.String, orderItemOrderItemwrite: OrderItemOrderItemwrite) : ApiResponse<OrderItemOrderItemreadOrderItemitemread?> {
        val localVariableConfig = apiOrderItemsIdPatchRequestConfig(id = id, orderItemOrderItemwrite = orderItemOrderItemwrite)

        return request<OrderItemOrderItemwrite, OrderItemOrderItemreadOrderItemitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiOrderItemsIdPatch
     *
     * @param id OrderItem identifier
     * @param orderItemOrderItemwrite The updated OrderItem resource
     * @return RequestConfig
     */
    fun apiOrderItemsIdPatchRequestConfig(id: kotlin.String, orderItemOrderItemwrite: OrderItemOrderItemwrite) : RequestConfig<OrderItemOrderItemwrite> {
        val localVariableBody = orderItemOrderItemwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/merge-patch+json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/order_items/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Creates a OrderItem resource.
     * Creates a OrderItem resource.
     * @param orderItemOrderItemcreateOrderItemwrite The new OrderItem resource
     * @return OrderItemOrderItemreadOrderItemitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiOrderItemsPost(orderItemOrderItemcreateOrderItemwrite: OrderItemOrderItemcreateOrderItemwrite) : OrderItemOrderItemreadOrderItemitemread {
        val localVarResponse = apiOrderItemsPostWithHttpInfo(orderItemOrderItemcreateOrderItemwrite = orderItemOrderItemcreateOrderItemwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as OrderItemOrderItemreadOrderItemitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a OrderItem resource.
     * Creates a OrderItem resource.
     * @param orderItemOrderItemcreateOrderItemwrite The new OrderItem resource
     * @return ApiResponse<OrderItemOrderItemreadOrderItemitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiOrderItemsPostWithHttpInfo(orderItemOrderItemcreateOrderItemwrite: OrderItemOrderItemcreateOrderItemwrite) : ApiResponse<OrderItemOrderItemreadOrderItemitemread?> {
        val localVariableConfig = apiOrderItemsPostRequestConfig(orderItemOrderItemcreateOrderItemwrite = orderItemOrderItemcreateOrderItemwrite)

        return request<OrderItemOrderItemcreateOrderItemwrite, OrderItemOrderItemreadOrderItemitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiOrderItemsPost
     *
     * @param orderItemOrderItemcreateOrderItemwrite The new OrderItem resource
     * @return RequestConfig
     */
    fun apiOrderItemsPostRequestConfig(orderItemOrderItemcreateOrderItemwrite: OrderItemOrderItemcreateOrderItemwrite) : RequestConfig<OrderItemOrderItemcreateOrderItemwrite> {
        val localVariableBody = orderItemOrderItemcreateOrderItemwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/order_items",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
