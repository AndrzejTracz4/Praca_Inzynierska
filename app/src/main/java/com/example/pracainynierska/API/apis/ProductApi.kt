/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ProductProductcreateProductwrite
import org.openapitools.client.models.ProductProductitemread
import org.openapitools.client.models.ProductProductreadProductitemread
import org.openapitools.client.models.ProductProductwrite

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class ProductApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Retrieves the collection of Product resources.
     * Retrieves the collection of Product resources.
     * @param page The collection page number (optional, default to 1)
     * @return kotlin.collections.List<ProductProductitemread>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiProductsGetCollection(page: kotlin.Int? = 1) : kotlin.collections.List<ProductProductitemread> {
        val localVarResponse = apiProductsGetCollectionWithHttpInfo(page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ProductProductitemread>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves the collection of Product resources.
     * Retrieves the collection of Product resources.
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse<kotlin.collections.List<ProductProductitemread>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiProductsGetCollectionWithHttpInfo(page: kotlin.Int?) : ApiResponse<kotlin.collections.List<ProductProductitemread>?> {
        val localVariableConfig = apiProductsGetCollectionRequestConfig(page = page)

        return request<Unit, kotlin.collections.List<ProductProductitemread>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiProductsGetCollection
     *
     * @param page The collection page number (optional, default to 1)
     * @return RequestConfig
     */
    fun apiProductsGetCollectionRequestConfig(page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Removes the Product resource.
     * Removes the Product resource.
     * @param id Product identifier
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiProductsIdDelete(id: kotlin.String) : Unit {
        val localVarResponse = apiProductsIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Removes the Product resource.
     * Removes the Product resource.
     * @param id Product identifier
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiProductsIdDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiProductsIdDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiProductsIdDelete
     *
     * @param id Product identifier
     * @return RequestConfig
     */
    fun apiProductsIdDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a Product resource.
     * Retrieves a Product resource.
     * @param id Product identifier
     * @return ProductProductreadProductitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiProductsIdGet(id: kotlin.String) : ProductProductreadProductitemread {
        val localVarResponse = apiProductsIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductProductreadProductitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a Product resource.
     * Retrieves a Product resource.
     * @param id Product identifier
     * @return ApiResponse<ProductProductreadProductitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiProductsIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<ProductProductreadProductitemread?> {
        val localVariableConfig = apiProductsIdGetRequestConfig(id = id)

        return request<Unit, ProductProductreadProductitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiProductsIdGet
     *
     * @param id Product identifier
     * @return RequestConfig
     */
    fun apiProductsIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the Product resource.
     * Updates the Product resource.
     * @param id Product identifier
     * @param productProductwrite The updated Product resource
     * @return ProductProductreadProductitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiProductsIdPatch(id: kotlin.String, productProductwrite: ProductProductwrite) : ProductProductreadProductitemread {
        val localVarResponse = apiProductsIdPatchWithHttpInfo(id = id, productProductwrite = productProductwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductProductreadProductitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the Product resource.
     * Updates the Product resource.
     * @param id Product identifier
     * @param productProductwrite The updated Product resource
     * @return ApiResponse<ProductProductreadProductitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiProductsIdPatchWithHttpInfo(id: kotlin.String, productProductwrite: ProductProductwrite) : ApiResponse<ProductProductreadProductitemread?> {
        val localVariableConfig = apiProductsIdPatchRequestConfig(id = id, productProductwrite = productProductwrite)

        return request<ProductProductwrite, ProductProductreadProductitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiProductsIdPatch
     *
     * @param id Product identifier
     * @param productProductwrite The updated Product resource
     * @return RequestConfig
     */
    fun apiProductsIdPatchRequestConfig(id: kotlin.String, productProductwrite: ProductProductwrite) : RequestConfig<ProductProductwrite> {
        val localVariableBody = productProductwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/merge-patch+json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Creates a Product resource.
     * Creates a Product resource.
     * @param productProductcreateProductwrite The new Product resource
     * @return ProductProductreadProductitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiProductsPost(productProductcreateProductwrite: ProductProductcreateProductwrite) : ProductProductreadProductitemread {
        val localVarResponse = apiProductsPostWithHttpInfo(productProductcreateProductwrite = productProductcreateProductwrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProductProductreadProductitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a Product resource.
     * Creates a Product resource.
     * @param productProductcreateProductwrite The new Product resource
     * @return ApiResponse<ProductProductreadProductitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiProductsPostWithHttpInfo(productProductcreateProductwrite: ProductProductcreateProductwrite) : ApiResponse<ProductProductreadProductitemread?> {
        val localVariableConfig = apiProductsPostRequestConfig(productProductcreateProductwrite = productProductcreateProductwrite)

        return request<ProductProductcreateProductwrite, ProductProductreadProductitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiProductsPost
     *
     * @param productProductcreateProductwrite The new Product resource
     * @return RequestConfig
     */
    fun apiProductsPostRequestConfig(productProductcreateProductwrite: ProductProductcreateProductwrite) : RequestConfig<ProductProductcreateProductwrite> {
        val localVariableBody = productProductcreateProductwrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/products",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
