/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.CategoryCategorycreateCategorywrite
import org.openapitools.client.models.CategoryCategoryitemread
import org.openapitools.client.models.CategoryCategoryreadCategoryitemread
import org.openapitools.client.models.CategoryCategorywriteCategoryupdate

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class CategoryApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Retrieves the collection of Category resources.
     * Retrieves the collection of Category resources.
     * @param page The collection page number (optional, default to 1)
     * @return kotlin.collections.List<CategoryCategoryitemread>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCategoriesGetCollection(page: kotlin.Int? = 1) : kotlin.collections.List<CategoryCategoryitemread> {
        val localVarResponse = apiCategoriesGetCollectionWithHttpInfo(page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CategoryCategoryitemread>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves the collection of Category resources.
     * Retrieves the collection of Category resources.
     * @param page The collection page number (optional, default to 1)
     * @return ApiResponse<kotlin.collections.List<CategoryCategoryitemread>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCategoriesGetCollectionWithHttpInfo(page: kotlin.Int?) : ApiResponse<kotlin.collections.List<CategoryCategoryitemread>?> {
        val localVariableConfig = apiCategoriesGetCollectionRequestConfig(page = page)

        return request<Unit, kotlin.collections.List<CategoryCategoryitemread>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiCategoriesGetCollection
     *
     * @param page The collection page number (optional, default to 1)
     * @return RequestConfig
     */
    fun apiCategoriesGetCollectionRequestConfig(page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/categories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Removes the Category resource.
     * Removes the Category resource.
     * @param id Category identifier
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCategoriesIdDelete(id: kotlin.String) : Unit {
        val localVarResponse = apiCategoriesIdDeleteWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Removes the Category resource.
     * Removes the Category resource.
     * @param id Category identifier
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCategoriesIdDeleteWithHttpInfo(id: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = apiCategoriesIdDeleteRequestConfig(id = id)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiCategoriesIdDelete
     *
     * @param id Category identifier
     * @return RequestConfig
     */
    fun apiCategoriesIdDeleteRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/categories/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieves a Category resource.
     * Retrieves a Category resource.
     * @param id Category identifier
     * @return CategoryCategoryreadCategoryitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCategoriesIdGet(id: kotlin.String) : CategoryCategoryreadCategoryitemread {
        val localVarResponse = apiCategoriesIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CategoryCategoryreadCategoryitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves a Category resource.
     * Retrieves a Category resource.
     * @param id Category identifier
     * @return ApiResponse<CategoryCategoryreadCategoryitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCategoriesIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<CategoryCategoryreadCategoryitemread?> {
        val localVariableConfig = apiCategoriesIdGetRequestConfig(id = id)

        return request<Unit, CategoryCategoryreadCategoryitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiCategoriesIdGet
     *
     * @param id Category identifier
     * @return RequestConfig
     */
    fun apiCategoriesIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/categories/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Updates the Category resource.
     * Updates the Category resource.
     * @param id Category identifier
     * @param categoryCategorywriteCategoryupdate The updated Category resource
     * @return CategoryCategoryreadCategoryitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCategoriesIdPatch(id: kotlin.String, categoryCategorywriteCategoryupdate: CategoryCategorywriteCategoryupdate) : CategoryCategoryreadCategoryitemread {
        val localVarResponse = apiCategoriesIdPatchWithHttpInfo(id = id, categoryCategorywriteCategoryupdate = categoryCategorywriteCategoryupdate)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CategoryCategoryreadCategoryitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the Category resource.
     * Updates the Category resource.
     * @param id Category identifier
     * @param categoryCategorywriteCategoryupdate The updated Category resource
     * @return ApiResponse<CategoryCategoryreadCategoryitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCategoriesIdPatchWithHttpInfo(id: kotlin.String, categoryCategorywriteCategoryupdate: CategoryCategorywriteCategoryupdate) : ApiResponse<CategoryCategoryreadCategoryitemread?> {
        val localVariableConfig = apiCategoriesIdPatchRequestConfig(id = id, categoryCategorywriteCategoryupdate = categoryCategorywriteCategoryupdate)

        return request<CategoryCategorywriteCategoryupdate, CategoryCategoryreadCategoryitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiCategoriesIdPatch
     *
     * @param id Category identifier
     * @param categoryCategorywriteCategoryupdate The updated Category resource
     * @return RequestConfig
     */
    fun apiCategoriesIdPatchRequestConfig(id: kotlin.String, categoryCategorywriteCategoryupdate: CategoryCategorywriteCategoryupdate) : RequestConfig<CategoryCategorywriteCategoryupdate> {
        val localVariableBody = categoryCategorywriteCategoryupdate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/merge-patch+json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/categories/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Creates a Category resource.
     * Creates a Category resource.
     * @param categoryCategorycreateCategorywrite The new Category resource
     * @return CategoryCategoryreadCategoryitemread
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiCategoriesPost(categoryCategorycreateCategorywrite: CategoryCategorycreateCategorywrite) : CategoryCategoryreadCategoryitemread {
        val localVarResponse = apiCategoriesPostWithHttpInfo(categoryCategorycreateCategorywrite = categoryCategorycreateCategorywrite)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CategoryCategoryreadCategoryitemread
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a Category resource.
     * Creates a Category resource.
     * @param categoryCategorycreateCategorywrite The new Category resource
     * @return ApiResponse<CategoryCategoryreadCategoryitemread?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiCategoriesPostWithHttpInfo(categoryCategorycreateCategorywrite: CategoryCategorycreateCategorywrite) : ApiResponse<CategoryCategoryreadCategoryitemread?> {
        val localVariableConfig = apiCategoriesPostRequestConfig(categoryCategorycreateCategorywrite = categoryCategorycreateCategorywrite)

        return request<CategoryCategorycreateCategorywrite, CategoryCategoryreadCategoryitemread>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiCategoriesPost
     *
     * @param categoryCategorycreateCategorywrite The new Category resource
     * @return RequestConfig
     */
    fun apiCategoriesPostRequestConfig(categoryCategorycreateCategorywrite: CategoryCategorycreateCategorywrite) : RequestConfig<CategoryCategorycreateCategorywrite> {
        val localVariableBody = categoryCategorycreateCategorywrite
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/ld+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/categories",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
